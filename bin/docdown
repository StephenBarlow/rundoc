#!/usr/bin/env ruby

unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')

require 'docdown'
require 'thor'

class DocdownCLI < Thor

  def initialize(*args)
    super
    @config = options[:config]
    @path   = options[:path]
    @working_dir = File.expand_path("../", @path)
    unless File.exist?(@config)
      @config = File.join(@working_dir, "docdown.rb")
    end
    load(@config) if @config && File.exist?(@config)
  end

  default_task :help

  desc "build", "turns docdown file into docs and a project"
  class_option  :path,   banner: "path/to/file.md",           optional: true, default: 'docdown.md'
  class_option  :config, banner: "path/to/docdown_config.rb", default: './docdown.rb'
  def build

    raise "#{@path} does not exist"   unless File.exist?(@path)
    contents = File.read(@path)
    dir      = File.expand_path("../project", @path)

    FileUtils.remove_entry_secure(dir) if Dir.exist?(dir)
    FileUtils.mkdir_p(dir)

    Dir.chdir(dir) do
      @output = Docdown::Parser.new(contents).to_md
    end
    readme_path = File.join(@working_dir, 'project', "README.md")
    File.open(readme_path, "w") { |f| f.write @output }
  end
end

DocdownCLI.start(ARGV)
