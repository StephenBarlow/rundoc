#!/usr/bin/env ruby

unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')

require 'rundoc'
require 'thor'

class RundocCLI < Thor

  def initialize(*args)
    super
    @path         = options[:path]
    @working_dir  = File.expand_path("../", @path)
  end

  default_task :help

  desc "build", "turns rundoc file into docs and a project"
  class_option  :path,   banner: "path/to/file.md",          optional: true, default: 'rundoc.md'
  def build
    raise "#{@path} does not exist"   unless File.exist?(@path)
    source_contents = File.read(@path)
    dir             = File.join(@working_dir, "tmp")

    FileUtils.remove_entry_secure(dir) if Dir.exist?(dir)
    FileUtils.mkdir_p(dir)

    puts "== Running your docs"
    Dir.chdir(dir) do
      @output = Rundoc::Parser.new(source_contents).to_md
    end

    puts "== Done, publishing to `/project` folder"

    tmp_root     = File.join(dir, Rundoc.project_root, ".")
    project_name = if Rundoc.project_root
      Rundoc.project_root.split('/').last
    else
      'project'
    end

    project_dir  = File.join(@working_dir, project_name)

    FileUtils.remove_entry_secure(project_dir) if Dir.exist?(project_dir)

    FileUtils.cp_r(tmp_root, project_dir)

    FileUtils.remove_entry_secure(dir) if Dir.exist?(dir)

    puts "== Done, writing original source to #{project_dir}/source.md"
    source_path = File.join(project_dir, "README.md")
    File.open(source_path, "w") { |f| f.write @output }

    puts "== Done, writing original source to #{project_dir}/source.md"
    source_path = File.join(project_dir, "coppied-" + @path.split('/').last)
    File.open(source_path, "w") { |f| f.write source_contents }

    Dir.chdir(project_dir) do
      Rundoc.run_after_build
    end
  end
end

RundocCLI.start(ARGV)
